Speed up system calls

    Which other xv6 system call(s) could be made faster using this shared page? Explain how.

    Answer: pipe, read, write, fork, exec,... Because:
        1. pipe:
        Why: The pipe system call involves copying data between processes via kernel buffers.
        How: Using a shared page as the buffer allows both processes (reader and writer) to directly read/write without additional kernel copying, reducing overhead.
        2. read and write:
        Why: These system calls involve transferring data between user space and kernel space, which requires copying.
        How: A shared page can be mapped as a buffer, enabling direct data access by both the application and the kernel, reducing data copying operations.
        3. fork:
        Why: The fork system call duplicates the memory space of the parent process for the child, which can be resource-intensive.
        How: Shared pages can hold data that doesn't need to be copied (e.g., shared state or read-only data), reducing duplication and memory allocation overhead.
        4. exec:
        Why: The exec system call replaces the process memory image by loading a new program from disk, requiring temporary buffers for the program's binary and arguments.
        How: Using the shared page as a buffer can speed up the loading process by avoiding kernel-managed memory allocation for temporary storage.

        If we add other parameters to this USYCALL shared page, the reading functions like uptime(), getuid(), getgid() will benefit because like getpid(), the above functions can read the results in this shared page.


Print a page table

    For every leaf page in the vmprint output, explain what it logically contains
    and what its permission bits are. Figure 3.4 in the xv6 book might be helpful, 
    although note that the figure might have a slightly different set of pages than
    the init process that's being inspected here.

    Answer: Printing the Page Table
        page table 0x0000000087f6b000
        ..0: pte 0x0000000021fd9c01 pa 0x0000000087f67000
        .. ..0: pte 0x0000000021fd9801 pa 0x0000000087f66000
        .. .. ..0: pte 0x0000000021fda01b pa 0x0000000087f68000
        .. .. ..1: pte 0x0000000021fd9417 pa 0x0000000087f65000
        .. .. ..2: pte 0x0000000021fd9007 pa 0x0000000087f64000
        .. .. ..3: pte 0x0000000021fd8c17 pa 0x0000000087f63000
        ..255: pte 0x0000000021fda801 pa 0x0000000087f6a000
        .. ..511: pte 0x0000000021fda401 pa 0x0000000087f69000
        .. .. ..509: pte 0x0000000021fdcc13 pa 0x0000000087f73000
        .. .. ..510: pte 0x0000000021fdd007 pa 0x0000000087f74000
        .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000
        
        leaf page 1: pte 0x0000000021fda01b pa 0x0000000087f68000
            Binary: 0000000000000000000000000000000000100001111111011010000000011011
            - PTE_V (Valid page)
            - PTE_R (Readable)
            - PTE_X (Executable)
            Logical Contents: This page likely contains executable code (e.g., instructions of a program) since it is both readable and executable.
        leaf page 2: pte 0x0000000021fd9417 pa 0x0000000087f65000
            Binary: 0000000000000000000000000000000000100001111111011001010000010111
            - PTE_V (Valid page)
            - PTE_R (Readable)
            - PTE_W (Writable)
            Logical Contents: This page contains writable data, such as variables or buffers used by the program.
        leaf page 3: pte 0x0000000021fd9007 pa 0x0000000087f64000
            Binary: 0000000000000000000000000000000000100001111111011001000000000111
            - PTE_V (Valid page)
            - PTE_R (Readable)
            - PTE_W (Writable)
            Logical Contents: Similar to Leaf Page 2, this page contains writable data such as global variables or heap allocations.
        leaf page 4: pte 0x0000000021fd8c17 pa 0x0000000087f63000
            Binary: 0000000000000000000000000000000000100001111111011000110000010111
            - PTE_V (Valid page)
            - PTE_R (Readable)
            - PTE_W (Writable)
            Logical Contents: Contains writable data, possibly stack or heap memory, used for dynamic allocations or runtime data.
        leaf page 5: pte 0x0000000021fdcc13 pa 0x0000000087f73000
            Binary: 0000000000000000000000000000000000100001111111011100110000010011
            - PTE_V (Valid page)
            - PTE_R (Readable)
            Logical Contents: This page is read-only and might store static or constant data, such as string literals or read-only global variables.
        leaf page 6: pte 0x0000000021fdd007 pa 0x0000000087f74000
            Binary: 0000000000000000000000000000000000100001111111011101000000000111
            - PTE_V (Valid page)
            - PTE_R (Readable)
            - PTE_W (Writable)
            Logical Contents: Writable data, potentially similar to pages 2-4, used for dynamic memory, variables, or buffers.
        leaf page 7: pte 0x0000000020001c0b pa 0x0000000080007000
            Binary: 0000000000000000000000000000000000100000000000000001110000001011
            - PTE_V (Valid page)
            - PTE_R (Readable)
            - PTE_X (Executable)
            Logical Contents: Executable code, such as the program's instructions or dynamically generated code.
